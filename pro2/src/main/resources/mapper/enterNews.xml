<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ex.repository.EnterNewsMapper">
	<!-- 1. 일간 조회수 TOP10 뉴스 (상단 슬라이드용) -->
	<select id="getTop10DailyNews" resultType="com.ex.data.EnterNewsDTO">
		select
			enter.num, enter.title, DBMS_LOB.SUBSTR(enter.content, 4000, 1) as content, enter.thumbnail as thumbnail, enter.writer_id,
			null as writerNickname, null as writerEmail,
			enter.reg, enter.readcount, enter.category, enter.hot
		from enter_news enter
		join enter_read_log log on enter.num = log.news_id
		where to_char(log.read_date, 'YYYY-MM-DD') = to_char(sysdate,'YYYY-MM-DD')
		and enter.status = 1
		group by
			enter.num, enter.title, DBMS_LOB.SUBSTR(enter.content, 4000, 1), enter.thumbnail, enter.writer_id, enter.reg, enter.readcount, enter.category, enter.hot
		order by count(1) desc
		fetch first 10 rows only
	</select>

	<!-- 2. 최신 뉴스 목록 (무한스크롤용, 페이징) -->
	<select id="getPagedEnterNews" resultType="com.ex.data.EnterNewsDTO">
		select
			num, title, content, writer_id, null as writerNickname, null as	writerEmail, reg, readcount, category, hot
		from enter_news
		where status = 1 order by reg desc
		offset #{offset} rows fetch next #{limit} rows only
	</select>

	<!-- 연예 기사 생성 -->
	<insert id="insertNews" parameterType="com.ex.data.EnterNewsDTO">
		insert into enter_news (num, title, content, writer_id, reg, readcount,	category, hot, status, thumbnail)
		values (enter_news_seq.NEXTVAL, #{title}, #{content}, #{writer_id},
		sysdate, 0, #{category}, 0, 1, #{thumbnail, jdbcType=VARCHAR})
	</insert>

	<!-- 조회수 증가 -->
	<update id="increaseReadCount" parameterType="int">
		update enter_news
		set readcount = readcount + 1
		where num = #{num}
	</update>

	<!-- 연예 기사 내용 보기 -->
	<select id="readEnterNews" resultType="com.ex.data.EnterNewsDTO"
		parameterType="int">
		select
			enter.num, enter.title, enter.content, enter.writer_id,
			users.nick as writerNickname, users.email as writerEmail,
			enter.reg, enter.readcount, enter.category, enter.hot
		from
			enter_news enter
		join users on enter.writer_id = users.id
		where enter.num = #{num} and enter.status = 1
	</select>

	<insert id="insertReadLog">
		insert into enter_read_log (id, news_id, read_date, reader_ip)
		VALUES (enter_read_log_seq.NEXTVAL, #{newsId}, SYSDATE, #{ip})
	</insert>

	<!-- 기사 삭제(softDelete) -->
	<update id="softDelete" parameterType="int">
		update enter_news
		set status = 0
		where num = #{num}
	</update>

	<!-- 기사 수정 -->
	<update id="updateEnterNews" parameterType="com.ex.data.EnterNewsDTO">
		update enter_news
		set
			title = #{title}, content = #{content}, category = #{category}, thumbnail = #{thumbnail}
		where
			num = #{num}
	</update>
	
	<!-- 카테고리별 뉴스 목록 -->
	<select id="getNewsByCategory" parameterType="string" resultType="com.ex.data.EnterNewsDTO">
		select
			num, title, DBMS_LOB.SUBSTR(content, 4000, 1) as content, writer_id,
			null as writerNickname, null as writerEmail,
			reg, readcount, category, hot, thumbnail
		from enter_news
		where status = 1 and category = #{category}
		order by reg desc
	</select>
	
	<!-- 카테고리별 뉴스. 무한스크롤용 -->
	<select id="getNewsByCategoryPaged" resultType="com.ex.data.EnterNewsDTO">
		select * from enter_news
		where status = 1 and category = #{category}
		order by reg desc
		offset #{offset} rows fetch next #{limit} rows only
	</select>

</mapper>